#!/usr/bin/env bash

set -o pipefail


NODEJS_VERSION=v`node -p "require('./package.json').version"`

NODEJS_URL=http://nodejs.org/dist/$NODEJS_VERSION/node-$NODEJS_VERSION.tar.gz

# https://nodejs.org/dist/v4.4.5/SHASUMS256.txt
NODEJS_SHA256='ea9c96ae4768feee4f18a26b819b9b4f6e49105ea0ee8c5c9d188dc8d49d4b77'


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`
source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?

PATH=$TOOLCHAIN/bin:$PATH


if [[ -z $JOBS ]]; then
  JOBS=$((`getconf _NPROCESSORS_ONLN` + 1))
fi

if [[ -z $MACHINE ]]; then
  MACHINE=`uname -m`
fi
case $MACHINE in
  i[345678]86)
    ARCH=ia32
#    CC="cc -m32"
#    CXX="cpp -m32"
  ;;

  x86_64)
    ARCH=x64
#    CC="cc -m64"
#    CXX="cpp -m64"
  ;;

  *)
    echo Unknown MACHINE "$MACHINE"
    exit 1
  ;;
esac


if [[ -z $OS ]]; then
  OS="`uname`"
fi
case $OS in
  'AIX')       PLATFORM=aix     ;;
#  'Android')   PLATFORM=android ;;
  'Darwin')    PLATFORM=mac     ;;
  'FreeBSD')   PLATFORM=freebsd ;;
  'Linux')     PLATFORM=linux   ;;
#  'OpenBSD')   PLATFORM=Openbsd ;;
  'SunOS')     PLATFORM=solaris ;;
  'WindowsNT') PLATFORM=win     ;;

  *)
    echo Unknown OS "$OS"
    exit 2
  ;;
esac


function rmStep(){
  rm -rf "$@"
  rmdir -p --ignore-fail-on-non-empty `dirname "$@"`
}

# Clean object dir and return the input error
function err(){
  rmStep $STEP_DIR
  exit $1
}


#
# Define steps paths
#

SRC_DIR=`pwd`/deps/node
OBJ_DIR=build/$MACHINE
OUT_DIR=`pwd`
PRODUCTS=(bin include share)
PREBUILD=prebuilds/$PLATFORM-$ARCH.tar.gz


#
# Download Node.js
#

STEP_DIR=$SRC_DIR

if [[ ! -d $STEP_DIR ]]; then
  mkdir -p $STEP_DIR || exit 3

  rmStep $OBJ_DIR

  curl $NODEJS_URL | tar -xz --strip-components=1 -C $STEP_DIR || err 4
fi


#
# Build Node.js
#

STEP_DIR=$OBJ_DIR

if [[ ! -f $STEP_DIR ]]; then
  rmStep $PREBUILD ${PRODUCTS[@]} var

  (
    mkdir -p $STEP_DIR #&&
#    cd       $STEP_DIR || exit 5
    cd $SRC_DIR && $MAKE clean  # Node.js don't support out-of-tree builds yet

    # Configure
#    CROSS_COMPILE="$TARGET-"  \
    CC=$TARGET-gcc          \
    CXX=$TARGET-g++         \
    $SRC_DIR/configure      \
        --prefix=$OUT_DIR   \
        --dest-cpu=$ARCH    \
        --dest-os=$PLATFORM \
        --without-dtrace    \
        --without-npm       \
        --without-snapshot  || exit 6

    make -j$JOBS &&
    make install || exit 7
  ) || err $?

  mv bin/node bin/$CPU &&
  ln -s $CPU bin/node  &&
  strip bin/node       || exit 8
fi


#
# Pack Node.js in a node-gyp compatible way
#

STEP_DIR=$PREBUILD

mkdir -p prebuilds                          &&
tar -cf - ${PRODUCTS[@]} | gzip > $PREBUILD || err 8
